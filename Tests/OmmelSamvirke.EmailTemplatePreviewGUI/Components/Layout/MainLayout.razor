@using OmmelSamvirke.EmailTemplatePreviewGUI.ViewModels
@using System.ComponentModel
@using CommunityToolkit.Mvvm.Messaging
@using OmmelSamvirke.EmailTemplatePreviewGUI.Messages

@inherits LayoutComponentBase

@inject TargetDeviceViewModel TargetDeviceViewModel
@inject ThemeViewModel ThemeViewModel

@implements IDisposable

<MudPopoverProvider />
<MudThemeProvider IsDarkMode="@_isDarkMode" Theme="_theme" />

<MudLayout>
    <MudDrawer @bind-Open="_navBarOpen"
               ClipMode="DrawerClipMode.Always"
               Variant="DrawerVariant.Temporary"
               Elevation="1"
               Anchor="Anchor.Left"
               Breakpoint="Breakpoint.Md"
               Class="mud-height-full">
        <NavBar />
    </MudDrawer>

    <MudAppBar Color="Color.Primary" Fixed="false">
        <MudIconButton Icon="@Icons.Material.Filled.Menu"
                       Style="margin-right: 20px;"
                       Color="Color.Inherit"
                       OnClick="ToggleNavBar" />

        <MudText Align="Align.Center" Typo="Typo.h5">Preview Email Templates</MudText>
        <MudSpacer/>

        <MudButtonGroup Color="Color.Surface" Variant="Variant.Outlined" Style="margin-right: 32px">
            <MudIconButton Icon="@Icons.Material.Filled.PhoneAndroid" Style="@($"color: {Colors.Gray.Lighten5}")" OnClick="() => TargetDeviceViewModel.TargetDevice = TargetDevice.Mobile"/>
            <MudIconButton Icon="@Icons.Material.Filled.TabletAndroid" Style="@($"color: {Colors.Gray.Lighten5}")" OnClick="() => TargetDeviceViewModel.TargetDevice = TargetDevice.Tablet"/>
            <MudIconButton Icon="@Icons.Material.Filled.LaptopChromebook" Style="@($"color: {Colors.Gray.Lighten5}")" OnClick="() => TargetDeviceViewModel.TargetDevice = TargetDevice.Desktop"/>
        </MudButtonGroup>

        <MudIconButton Icon="@ToggleIcon"
                       Style="@ToggleStyle"
                       OnClick="ToggleDarkMode"/>
    </MudAppBar>
    
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private readonly MudTheme _theme = new()
    {
        Typography = new Typography
        {
            Default = new Default
            {
                FontFamily = ["Helvetica", "Arial", "sans-serif"]
            }
        },
        PaletteLight = new PaletteLight
        {
            Background = "#f4f4f4"
        }
    };

    private bool _isDarkMode;
    private bool _navBarOpen;

    private string ToggleIcon => _isDarkMode ? Icons.Material.Filled.WbSunny : Icons.Material.Filled.NightsStay;
    private string ToggleStyle => $"color: {(_isDarkMode ? Colors.Yellow.Darken1 : Colors.Gray.Lighten3)};";

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ThemeViewModel.PropertyChanged += OnThemeChanged;
        _isDarkMode = ThemeViewModel.Theme == AppTheme.Dark;
        
        WeakReferenceMessenger.Default.Register<CloseNavBarMessage>(this, (_, _) =>
        {
            _navBarOpen = false;
            InvokeAsync(StateHasChanged);
        });
    }

    private void ToggleDarkMode()
    {
        _isDarkMode = !_isDarkMode;
        ThemeViewModel.Theme = _isDarkMode ? AppTheme.Dark : AppTheme.Light;


        StateHasChanged();
    }

    private void OnThemeChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(ThemeViewModel.Theme))
        {
            _isDarkMode = ThemeViewModel.Theme == AppTheme.Dark;
            InvokeAsync(StateHasChanged);
        }
    }
    
    private void ToggleNavBar()
    {
        _navBarOpen = !_navBarOpen;
    }

    public void Dispose()
    {
        ThemeViewModel.PropertyChanged -= OnThemeChanged;
    }
}
