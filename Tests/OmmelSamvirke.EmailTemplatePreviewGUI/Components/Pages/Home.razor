@page "/"

@using OmmelSamvirke.EmailTemplatePreviewGUI.ViewModels
@using System.ComponentModel

@inject TargetDeviceViewModel TargetDeviceViewModel
@inject ThemeViewModel ThemeViewModel
@inject EmailTemplatesViewModel EmailTemplatesViewModel

@implements IDisposable

<PageTitle>Email Template Preview</PageTitle>

<div id="container">
    <iframe
        srcdoc="@EmailTemplatesViewModel.Content"
        class="test mud-elevation-1"
        style="@($"width: {_containerSize}px; {(_isDarkMode ? "" : "background: white")}")">
    </iframe>
</div>

@code {
    private static class ScreenSizes
    {
        public const int Desktop = 1400;
        public const int Tablet = 768;
        public const int Mobile = 360;
    }
    
    private int _containerSize = ScreenSizes.Tablet;
    private bool _isDarkMode;
    
    protected override void OnInitialized()
    {
        EmailTemplatesViewModel.PropertyChanged += OnEmailTemplateChanged;
        TargetDeviceViewModel.PropertyChanged += OnTargetDeviceChanged;
        ThemeViewModel.PropertyChanged += OnThemeChanged;
    }

    private void OnEmailTemplateChanged(object? sender, PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnTargetDeviceChanged(object? sender, PropertyChangedEventArgs e)
    {
        TargetDevice updateTargetDevice = TargetDeviceViewModel.TargetDevice;
        _containerSize = updateTargetDevice switch
        {
            TargetDevice.Desktop => ScreenSizes.Desktop,
            TargetDevice.Tablet => ScreenSizes.Tablet,
            TargetDevice.Mobile => ScreenSizes.Mobile,
            _ => _containerSize
        };

        InvokeAsync(StateHasChanged);
    }

    private void OnThemeChanged(object? sender, PropertyChangedEventArgs e)
    {
        AppTheme newAppTheme = ThemeViewModel.Theme;
        _isDarkMode = newAppTheme switch
        {
            AppTheme.Light => false,
            AppTheme.Dark => true,
            _ => _isDarkMode
        };

        InvokeAsync(StateHasChanged);
    }
    
    public void Dispose()
    {
        EmailTemplatesViewModel.PropertyChanged -= OnEmailTemplateChanged;
        TargetDeviceViewModel.PropertyChanged -= OnTargetDeviceChanged;
        ThemeViewModel.PropertyChanged -= OnThemeChanged;
    }
}
