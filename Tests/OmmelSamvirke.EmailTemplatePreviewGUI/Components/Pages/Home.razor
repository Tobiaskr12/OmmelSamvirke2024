@page "/"

@using OmmelSamvirke.EmailTemplatePreviewGUI.ViewModels
@using System.ComponentModel
@using OmmelSamvirke.EmailTemplatePreviewGUI.Models

@inject TargetDeviceViewModel TargetDeviceViewModel
@inject ThemeViewModel ThemeViewModel
@inject EmailTemplatesViewModel EmailTemplatesViewModel

@implements IDisposable

<PageTitle>Email Template Preview</PageTitle>

<div id="container">
    @* Render email subject (inferred from template markup) *@
    @if (!string.IsNullOrEmpty(EmailTemplatesViewModel.Subject))
    {
        <MudText Typo="Typo.h4" Style="margin-bottom: 24px">
            Email Subject: @EmailTemplatesViewModel.Subject
        </MudText>
    }
    
    @* Render controls for modifying email template parameters *@
    @if (EmailTemplatesViewModel.Parameters.Any())
    {
        <div style="display: flex; flex-direction: row; justify-content: space-between; width: 768px">
            <MudSelect T="string"
                       Label="Select Parameter"
                       @bind-Value="EmailTemplatesViewModel.SelectedParameterName"
                       AnchorOrigin="Origin.BottomCenter"
                       Variant="Variant.Outlined"
                       Style="@($"margin-right: 20px; {(_isDarkMode ? "" : "background: white;")} width: 100px;")">
                @foreach (Parameter param in EmailTemplatesViewModel.Parameters)
                {
                    <MudSelectItem Value="@param.Name">@param.Name</MudSelectItem>
                }
            </MudSelect>

            @if (EmailTemplatesViewModel.SelectedParameter != null)
            {
                <MudTextField Label="Value"
                              Immediate="true"
                              @bind-Value="EmailTemplatesViewModel.SelectedParameter.Value"
                              Variant="Variant.Outlined"
                              Style="@($"{(_isDarkMode ? "" : "background: white;")}")"
                              AdornmentColor="Color.Primary"/>
            }
        </div>
    }

    @* Render email content *@
    <iframe
        srcdoc="@EmailTemplatesViewModel.Content"
        class="test mud-elevation-1"
        style="@($"width: {_containerSize}px; {(_isDarkMode ? "" : "background: white")}")">
    </iframe>
    
    @* Show button for sending a test email to a test email address *@
    @if (!string.IsNullOrEmpty(EmailTemplatesViewModel.Content))
    {
        <MudButton
            Variant="Variant.Filled"
            OnClick="EmailTemplatesViewModel.OnSendEmailToTestAddress"
            Color="Color.Primary">
            Send to ommelsamvirketest1@gmail.com
        </MudButton>
    }
</div>

@code {
    private static class ScreenSizes
    {
        public const int Desktop = 1400;
        public const int Tablet = 768;
        public const int Mobile = 360;
    }

    private int _containerSize = ScreenSizes.Tablet;
    private bool _isDarkMode;

    protected override void OnInitialized()
    {
        EmailTemplatesViewModel.PropertyChanged += OnEmailTemplateChanged;
        TargetDeviceViewModel.PropertyChanged += OnTargetDeviceChanged;
        ThemeViewModel.PropertyChanged += OnThemeChanged;
    }

    private void OnEmailTemplateChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(EmailTemplatesViewModel.Content) ||
            e.PropertyName == nameof(EmailTemplatesViewModel.Parameters) ||
            e.PropertyName == nameof(EmailTemplatesViewModel.SelectedParameter) ||
            e.PropertyName == nameof(EmailTemplatesViewModel.SelectedParameterName))
        {
            InvokeAsync(StateHasChanged);
        }
    }

    private void OnTargetDeviceChanged(object? sender, PropertyChangedEventArgs e)
    {
        TargetDevice updateTargetDevice = TargetDeviceViewModel.TargetDevice;
        _containerSize = updateTargetDevice switch
        {
            TargetDevice.Desktop => ScreenSizes.Desktop,
            TargetDevice.Tablet => ScreenSizes.Tablet,
            TargetDevice.Mobile => ScreenSizes.Mobile,
            _ => _containerSize
        };

        InvokeAsync(StateHasChanged);
    }

    private void OnThemeChanged(object? sender, PropertyChangedEventArgs e)
    {
        AppTheme newAppTheme = ThemeViewModel.Theme;
        _isDarkMode = newAppTheme switch
        {
            AppTheme.Light => false,
            AppTheme.Dark => true,
            _ => _isDarkMode
        };

        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        EmailTemplatesViewModel.PropertyChanged -= OnEmailTemplateChanged;
        TargetDeviceViewModel.PropertyChanged -= OnTargetDeviceChanged;
        ThemeViewModel.PropertyChanged -= OnThemeChanged;
    }
}
