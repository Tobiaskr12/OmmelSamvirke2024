// <auto-generated />
using System;
using DataAccess.Base;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(OmmelSamvirkeDbContext))]
    [Migration("20250417182129_ReaddAlbumRelations")]
    partial class ReaddAlbumRelations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CampaignUncleanedRecipient", b =>
                {
                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<int>("RecipientId")
                        .HasColumnType("int");

                    b.HasKey("CampaignId", "RecipientId");

                    b.HasIndex("RecipientId");

                    b.ToTable("Join_CampaignRecipients", (string)null);
                });

            modelBuilder.Entity("ContactListRecipient", b =>
                {
                    b.Property<int>("ContactListId")
                        .HasColumnType("int");

                    b.Property<int>("RecipientId")
                        .HasColumnType("int");

                    b.HasKey("ContactListId", "RecipientId");

                    b.HasIndex("RecipientId");

                    b.ToTable("Join_ContactListRecipients", (string)null);
                });

            modelBuilder.Entity("DomainModules.BlobStorage.Entities.BlobStorageFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmailId")
                        .HasColumnType("int");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("FileBaseName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("_storedFileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("FileSizeInBytes");

                    b.HasKey("Id");

                    b.HasIndex("DateCreated");

                    b.HasIndex("EmailId");

                    b.HasIndex("EventId");

                    b.ToTable("BlobStorageFiles", (string)null);
                });

            modelBuilder.Entity("DomainModules.Emails.Entities.ContactList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UnsubscribeToken")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ContactLists", (string)null);
                });

            modelBuilder.Entity("DomainModules.Emails.Entities.ContactListUnsubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactListId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UndoToken")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ContactListUnsubscriptions", (string)null);
                });

            modelBuilder.Entity("DomainModules.Emails.Entities.DailyContactListAnalytics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactListName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsNewsletter")
                        .HasColumnType("bit");

                    b.Property<int>("TotalContacts")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DailyContactListAnalytics", (string)null);
                });

            modelBuilder.Entity("DomainModules.Emails.Entities.DailyEmailAnalytics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("SentEmails")
                        .HasColumnType("int");

                    b.Property<int>("TotalRecipients")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DailyEmailAnalytics", (string)null);
                });

            modelBuilder.Entity("DomainModules.Emails.Entities.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("HtmlBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsNewsletter")
                        .HasColumnType("bit");

                    b.Property<string>("PlainTextBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderEmailAddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("DateCreated");

                    b.ToTable("Emails", (string)null);
                });

            modelBuilder.Entity("DomainModules.Emails.Entities.Recipient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.HasIndex("Token");

                    b.ToTable("Recipients", (string)null);
                });

            modelBuilder.Entity("DomainModules.Events.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventCoordinatorId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventCoordinatorId");

                    b.HasIndex("ReservationId")
                        .IsUnique()
                        .HasFilter("[ReservationId] IS NOT NULL");

                    b.ToTable("Events", (string)null);
                });

            modelBuilder.Entity("DomainModules.Events.Entities.EventCoordinator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("EventCoordinators", (string)null);
                });

            modelBuilder.Entity("DomainModules.ImageAlbums.Entities.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CoverImageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CoverImageId")
                        .IsUnique()
                        .HasFilter("[CoverImageId] IS NOT NULL");

                    b.HasIndex("DateCreated");

                    b.HasIndex("Name");

                    b.ToTable("Albums", (string)null);
                });

            modelBuilder.Entity("DomainModules.ImageAlbums.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTaken")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DefaultBlobStorageFileId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Location")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("OriginalBlobStorageFileId")
                        .HasColumnType("int");

                    b.Property<string>("PhotographerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ThumbnailBlobStorageFileId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("DateCreated");

                    b.HasIndex("DateTaken");

                    b.HasIndex("DefaultBlobStorageFileId")
                        .IsUnique()
                        .HasFilter("[DefaultBlobStorageFileId] IS NOT NULL");

                    b.HasIndex("OriginalBlobStorageFileId")
                        .IsUnique();

                    b.HasIndex("ThumbnailBlobStorageFileId")
                        .IsUnique()
                        .HasFilter("[ThumbnailBlobStorageFileId] IS NOT NULL");

                    b.ToTable("Images", (string)null);
                });

            modelBuilder.Entity("DomainModules.Newsletters.Entities.NewsletterGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactListId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ContactListId")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.ToTable("NewsletterGroups", (string)null);
                });

            modelBuilder.Entity("DomainModules.Newsletters.Entities.NewsletterGroupsCleanupCampaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CampaignDurationMonths")
                        .HasColumnType("int");

                    b.Property<DateTime>("CampaignStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCampaignStarted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastReminderSent")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CampaignStart");

                    b.ToTable("NewsletterGroupsCleanupCampaigns", (string)null);
                });

            modelBuilder.Entity("DomainModules.Newsletters.Entities.NewsletterSubscriptionConfirmation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ConfirmationExpiry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ConfirmationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ConfirmationToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("RecipientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConfirmationExpiry");

                    b.HasIndex("RecipientId");

                    b.ToTable("NewsletterSubscriptionConfirmations", (string)null);
                });

            modelBuilder.Entity("DomainModules.Newsletters.Entities.NewsletterUnsubscribeConfirmation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ConfirmationExpiry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ConfirmationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ConfirmationToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("RecipientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConfirmationExpiry");

                    b.HasIndex("RecipientId");

                    b.ToTable("NewsletterUnsubscribeConfirmations", (string)null);
                });

            modelBuilder.Entity("DomainModules.Reservations.Entities.BlockedReservationTimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StartTime");

                    b.ToTable("BlockedReservationTimeSlots", (string)null);
                });

            modelBuilder.Entity("DomainModules.Reservations.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CommunityName")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ReservationHistoryId")
                        .HasColumnType("int");

                    b.Property<int>("ReservationLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("ReservationSeriesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("ReservationHistoryId");

                    b.HasIndex("ReservationLocationId");

                    b.HasIndex("ReservationSeriesId");

                    b.ToTable("Reservations", (string)null);
                });

            modelBuilder.Entity("DomainModules.Reservations.Entities.ReservationHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("Token")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Token");

                    b.ToTable("ReservationHistories", (string)null);
                });

            modelBuilder.Entity("DomainModules.Reservations.Entities.ReservationLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("Id");

                    b.ToTable("ReservationLocations", (string)null);
                });

            modelBuilder.Entity("DomainModules.Reservations.Entities.ReservationSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecurrenceEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RecurrenceStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RecurrenceType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecurrenceEndDate");

                    b.HasIndex("RecurrenceStartDate");

                    b.ToTable("ReservationSeries", (string)null);
                });

            modelBuilder.Entity("EmailRecipient", b =>
                {
                    b.Property<int>("EmailId")
                        .HasColumnType("int");

                    b.Property<int>("RecipientId")
                        .HasColumnType("int");

                    b.HasKey("EmailId", "RecipientId");

                    b.HasIndex("RecipientId");

                    b.ToTable("Join_EmailRecipients", (string)null);
                });

            modelBuilder.Entity("NewsletterGroupNewsletterSubscriptionConfirmation", b =>
                {
                    b.Property<int>("NewsletterGroupsId")
                        .HasColumnType("int");

                    b.Property<int>("NewsletterSubscriptionConfirmationsId")
                        .HasColumnType("int");

                    b.HasKey("NewsletterGroupsId", "NewsletterSubscriptionConfirmationsId");

                    b.HasIndex("NewsletterSubscriptionConfirmationsId");

                    b.ToTable("Join_NewsletterSubscriptionConfirmationNewsletterGroups", (string)null);
                });

            modelBuilder.Entity("NewsletterGroupNewsletterUnsubscribeConfirmation", b =>
                {
                    b.Property<int>("NewsletterGroupsId")
                        .HasColumnType("int");

                    b.Property<int>("NewsletterUnsubscribeConfirmationsId")
                        .HasColumnType("int");

                    b.HasKey("NewsletterGroupsId", "NewsletterUnsubscribeConfirmationsId");

                    b.HasIndex("NewsletterUnsubscribeConfirmationsId");

                    b.ToTable("Join_NewsletterUnsubscribeConfirmationNewsletterGroups", (string)null);
                });

            modelBuilder.Entity("CampaignUncleanedRecipient", b =>
                {
                    b.HasOne("DomainModules.Newsletters.Entities.NewsletterGroupsCleanupCampaign", null)
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainModules.Emails.Entities.Recipient", null)
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContactListRecipient", b =>
                {
                    b.HasOne("DomainModules.Emails.Entities.ContactList", null)
                        .WithMany()
                        .HasForeignKey("ContactListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainModules.Emails.Entities.Recipient", null)
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainModules.BlobStorage.Entities.BlobStorageFile", b =>
                {
                    b.HasOne("DomainModules.Emails.Entities.Email", null)
                        .WithMany("Attachments")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DomainModules.Events.Entities.Event", null)
                        .WithMany("RemoteFiles")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DomainModules.Events.Entities.Event", b =>
                {
                    b.HasOne("DomainModules.Events.Entities.EventCoordinator", "EventCoordinator")
                        .WithMany()
                        .HasForeignKey("EventCoordinatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DomainModules.Reservations.Entities.Reservation", "Reservation")
                        .WithOne("Event")
                        .HasForeignKey("DomainModules.Events.Entities.Event", "ReservationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("EventCoordinator");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("DomainModules.ImageAlbums.Entities.Album", b =>
                {
                    b.HasOne("DomainModules.ImageAlbums.Entities.Image", "CoverImage")
                        .WithOne()
                        .HasForeignKey("DomainModules.ImageAlbums.Entities.Album", "CoverImageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CoverImage");
                });

            modelBuilder.Entity("DomainModules.ImageAlbums.Entities.Image", b =>
                {
                    b.HasOne("DomainModules.ImageAlbums.Entities.Album", "Album")
                        .WithMany("Images")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DomainModules.BlobStorage.Entities.BlobStorageFile", "DefaultBlobStorageFile")
                        .WithOne()
                        .HasForeignKey("DomainModules.ImageAlbums.Entities.Image", "DefaultBlobStorageFileId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DomainModules.BlobStorage.Entities.BlobStorageFile", "OriginalBlobStorageFile")
                        .WithOne()
                        .HasForeignKey("DomainModules.ImageAlbums.Entities.Image", "OriginalBlobStorageFileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DomainModules.BlobStorage.Entities.BlobStorageFile", "ThumbnailBlobStorageFile")
                        .WithOne()
                        .HasForeignKey("DomainModules.ImageAlbums.Entities.Image", "ThumbnailBlobStorageFileId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Album");

                    b.Navigation("DefaultBlobStorageFile");

                    b.Navigation("OriginalBlobStorageFile");

                    b.Navigation("ThumbnailBlobStorageFile");
                });

            modelBuilder.Entity("DomainModules.Newsletters.Entities.NewsletterGroup", b =>
                {
                    b.HasOne("DomainModules.Emails.Entities.ContactList", "ContactList")
                        .WithOne()
                        .HasForeignKey("DomainModules.Newsletters.Entities.NewsletterGroup", "ContactListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactList");
                });

            modelBuilder.Entity("DomainModules.Newsletters.Entities.NewsletterSubscriptionConfirmation", b =>
                {
                    b.HasOne("DomainModules.Emails.Entities.Recipient", "Recipient")
                        .WithMany("NewsletterSubscriptionConfirmations")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("DomainModules.Newsletters.Entities.NewsletterUnsubscribeConfirmation", b =>
                {
                    b.HasOne("DomainModules.Emails.Entities.Recipient", "Recipient")
                        .WithMany("NewsletterUnsubscribeConfirmations")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("DomainModules.Reservations.Entities.Reservation", b =>
                {
                    b.HasOne("DomainModules.Reservations.Entities.ReservationHistory", null)
                        .WithMany("Reservations")
                        .HasForeignKey("ReservationHistoryId");

                    b.HasOne("DomainModules.Reservations.Entities.ReservationLocation", "Location")
                        .WithMany()
                        .HasForeignKey("ReservationLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DomainModules.Reservations.Entities.ReservationSeries", null)
                        .WithMany("Reservations")
                        .HasForeignKey("ReservationSeriesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Location");
                });

            modelBuilder.Entity("EmailRecipient", b =>
                {
                    b.HasOne("DomainModules.Emails.Entities.Email", null)
                        .WithMany()
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainModules.Emails.Entities.Recipient", null)
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NewsletterGroupNewsletterSubscriptionConfirmation", b =>
                {
                    b.HasOne("DomainModules.Newsletters.Entities.NewsletterGroup", null)
                        .WithMany()
                        .HasForeignKey("NewsletterGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainModules.Newsletters.Entities.NewsletterSubscriptionConfirmation", null)
                        .WithMany()
                        .HasForeignKey("NewsletterSubscriptionConfirmationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NewsletterGroupNewsletterUnsubscribeConfirmation", b =>
                {
                    b.HasOne("DomainModules.Newsletters.Entities.NewsletterGroup", null)
                        .WithMany()
                        .HasForeignKey("NewsletterGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainModules.Newsletters.Entities.NewsletterUnsubscribeConfirmation", null)
                        .WithMany()
                        .HasForeignKey("NewsletterUnsubscribeConfirmationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainModules.Emails.Entities.Email", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("DomainModules.Emails.Entities.Recipient", b =>
                {
                    b.Navigation("NewsletterSubscriptionConfirmations");

                    b.Navigation("NewsletterUnsubscribeConfirmations");
                });

            modelBuilder.Entity("DomainModules.Events.Entities.Event", b =>
                {
                    b.Navigation("RemoteFiles");
                });

            modelBuilder.Entity("DomainModules.ImageAlbums.Entities.Album", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("DomainModules.Reservations.Entities.Reservation", b =>
                {
                    b.Navigation("Event");
                });

            modelBuilder.Entity("DomainModules.Reservations.Entities.ReservationHistory", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("DomainModules.Reservations.Entities.ReservationSeries", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
