@using System.Reflection
@using MudBlazor.Services

@implements IBrowserViewportObserver

@inject IBrowserViewportService BrowserViewportService

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8"/>
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
        <base href="/"/>
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
        <link href="https://fonts.googleapis.com/css2?family=Lobster+Two:ital,wght@0,400;0,700;1,400;1,700&display=swap" rel="stylesheet">
        @* ReSharper disable Html.PathError *@
        <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
        <link rel="stylesheet" href="Web.styles.css?v=@Version"/>
        @* ReSharper restore Html.PathError *@
        
        @* Custom CSS files are loaded after third-party CSS files, so I can override third-party styles *@
        <link rel="stylesheet" href="app.css"/>
        <link rel="stylesheet" href="variables.css"/>
        <HeadOutlet @rendermode="new InteractiveServerRenderMode(prerender: false)"/>
        <title>Ommel Samvirke</title>
    </head>
    <body style=@($"{(_bp <= Breakpoint.Md ? "background-color: white" : "")}")>
        <Routes @rendermode="new InteractiveServerRenderMode(prerender: false)"/>
        @* ReSharper disable Html.PathError *@
        <script src="_framework/blazor.web.js"></script>
        <script src="_content/MudBlazor/MudBlazor.min.js"></script>
        @* ReSharper restore Html.PathError *@
    </body>
</html>

@code {
    private static long? _version;
    public static long Version
    {
        get
        {
            _version ??= GetAssemblyFileDate();
            return (long)_version;
        }
    }
    
    private static long GetAssemblyFileDate()
    {
        var assembly = Assembly.GetExecutingAssembly();
        FileInfo fi = new(assembly.Location);
        return fi.LastWriteTime.Ticks;
    }
    
    // ViewPort Breakpoint service setup
    private Breakpoint _bp;
    public async ValueTask DisposeAsync() => await BrowserViewportService.UnsubscribeAsync(this);

    Guid IBrowserViewportObserver.Id { get; } = Guid.NewGuid();

    ResizeOptions IBrowserViewportObserver.ResizeOptions { get; } = new()
    {
        ReportRate = 250,
        NotifyOnBreakpointOnly = true
    };

    Task IBrowserViewportObserver.NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs browserViewportEventArgs)
    {
        _bp = browserViewportEventArgs.Breakpoint;
        
        return InvokeAsync(StateHasChanged);
    }
}