@using DomainModules.Events.Entities
@using FluentValidation
@using FluentValidation.Results
@using Web.Components.Shared.StepperForm

@inject IValidator<Event> EventValidator

<MudStepper
    Vertical
    NonLinear="false"
    @bind-ActiveIndex="StepIndex"
    Style="margin-right: 8px">
    <ChildContent>
        <ValidatedStep T="Event"
                       @ref="_step1"
                       Title="Beskriv begivenheden"
                       Model="_event"
                       Validator="EventValidator"
                       IsValidChanged="@(b => OnStepValidityChanged(1, b))">
            <EventDescription Model="_event" />
        </ValidatedStep>
        
        <ValidatedStep T="Event"
                       @ref="_step2"
                       Title="Dato og tidspunkt"
                       Model="_event"
                       Validator="EventValidator"
                       IsValidChanged="@(b => OnStepValidityChanged(2, b))">
            <DateAndTimeSection Model="_event" IsMobile="IsMobile"/>
        </ValidatedStep>
        
        <ValidatedStep T="Event"
                       @ref="_step3"
                       Title="Tovholder"
                       Model="_event"
                       Validator="EventValidator"
                       IsValidChanged="@(b => OnStepValidityChanged(3, b))">
            <EventCoordinatorSection Model="_event"/>
        </ValidatedStep>
    </ChildContent>
    <ActionContent Context="stepper">
        <div class="d-flex flex-column" style="width: 100%; margin-left: 8px;">
            <div class="d-flex flex-row">
                <MudButton
                    OnClick="@(() => Previous(stepper))"
                    StartIcon="@Icons.Material.Filled.ArrowBack"
                    Color="Color.Primary"
                    Style="@($"visibility: {(_stepIndex <= 0 ? "hidden" : "visible")}")">
                    Forrige
                </MudButton>

                <MudSpacer/>

                @if (_stepIndex < stepper.Steps.Count - 1)
                {
                    <MudTooltip Text="Udfyld formularen for at gå til næste side" Disabled="_isCurrentValid">
                        <MudButton
                            OnClick="@(() => Next(stepper))"
                            EndIcon="@Icons.Material.Filled.ArrowForward"
                            Color="Color.Primary"
                            Disabled="!_isCurrentValid">
                            Næste
                        </MudButton>
                    </MudTooltip>
                }
                else
                {
                    // Check for validation errors
                    <MudTooltip Text="Formularen er ikke udfyldt korrekt" Disabled="AllValid">
                        <MudButton
                            ButtonType="ButtonType.Submit"
                            OnClick="@(() => Save(stepper))"
                            Variant="Variant.Filled"
                            EndIcon="@Icons.Material.Filled.Save"
                            Color="Color.Primary"
                            Disabled="!AllValid">
                            Gem
                        </MudButton>
                    </MudTooltip>
                }
            </div>
        </div>
    </ActionContent>
</MudStepper>

@code {
    [Parameter] public bool IsMobile { get; set; }
    
    private int _stepIndex;
    private int StepIndex
    {
        get => _stepIndex;
        set
        {
            if (value < 0 || value >= Steps.Length) return;
            if (value == _stepIndex) return;

            if (_stepIndex >= 0 && _stepIndex < Steps.Length)
            {
                Steps[_stepIndex].MarkVisited();
            }
            
            _stepIndex = value;
            _isCurrentValid = _isStepValid[_stepIndex];

            StateHasChanged();
        }
    }

    private bool _isCurrentValid;
    private readonly bool[] _isStepValid = new bool[3];

    private void OnStepValidityChanged(int step, bool isValid)
    {
        _isStepValid[step - 1] = isValid;
        if (step - 1 == _stepIndex)
        {
            _isCurrentValid = isValid;
        }
        
        StateHasChanged();
    }

    private bool AllValid => _isStepValid.All(v => v);
    
    private Event _event = new()
    {
        Title = string.Empty,
        Description = string.Empty,
        Location = string.Empty,
        StartTime = DateTime.MinValue,
        EndTime = DateTime.MinValue,
        EventCoordinator = new EventCoordinator
        {
            Name = string.Empty,
            EmailAddress = string.Empty,
            PhoneNumber = string.Empty
        }
    };

    private ValidatedStep<Event> _step1 = null!, _step2 = null!, _step3 = null!;
    private ValidatedStep<Event>[] Steps => [_step1, _step2, _step3];
    
    private bool[] _visited = [true, false, false];
    
    private async Task Next(MudStepper stepper)
    {
        ValidatedStep<Event> currentStep = Steps[_stepIndex];
        if (currentStep.IsValid)
        {
            _isCurrentValid = false;
            StateHasChanged();
            await stepper.NextStepAsync();
        }
    }

    private async Task Previous(MudStepper stepper)
    {
        await stepper.PreviousStepAsync();
    }

    private async Task Save(MudStepper stepper)
    {
        ValidationResult? result = await EventValidator.ValidateAsync(_event);
        if (result.IsValid)
        {
          // Try to save   
        }
    }
}
