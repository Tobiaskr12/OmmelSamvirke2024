@page "/"
@using Contracts.SupportModules.Logging

@inject ILoggingHandler Logger

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

@code {
    protected override Task OnInitializedAsync()
    {
        Logger.LogInformation("Information Log");
        Logger.LogWarning("Warning Log");
        Logger.LogDebug("Debug Log");

        try
        {
            // Call a series of nested methods to generate a large stack trace
            Level1();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error log");
        }

        Logger.LogCritical(new Exception("This is a critical log"), "Critical Log");

        return base.OnInitializedAsync();
    }

    // A chain of nested methods to build up the stack trace
    private void Level1() => Level2();
    private void Level2() => Level3();
    private void Level3() => Level4();
    private void Level4() => Level5();
    private void Level5() => Level6();
    private void Level6() => Level7();
    private void Level7() => Level8();
    private void Level8() => Level9();
    private void Level9() => Level10();
    private void Level10() 
    {
        // Throwing an exception here generates a stack trace that includes all the above methods
        throw new Exception("This is an error log with a large stack trace");
    }
}