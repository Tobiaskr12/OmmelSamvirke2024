@using ApexCharts
@using Contracts.SupportModules.Logging.Models
@using Web.Components.Pages.TechnicalData
@using Web.Components.Pages.TechnicalData.Components.Timeline.Models
@using System.ComponentModel
@using Web.Components.Pages.TechnicalData.Localization
@using Web.Components.ViewModels
@using System.Globalization

@implements IDisposable

@inject IApexChartService ApexChartService
@inject TimelineViewModel TimelineViewModel
@inject ThemeViewModel ThemeViewModel
@inject DashboardViewModel DashboardViewModel

@if (TimelineViewModel.Timeline is not null)
{
    <ApexChart 
        @ref="_chart"
        TItem="BucketedEntry"
               Title="@(TimelineViewModel.Timeline.Type.Name == nameof(LogEntry) ? TechnicalDataLocalization.TimelineTitle_Logs : TechnicalDataLocalization.TimelineTitle_Traces)"
        Width="@("100%")"
        OnDataPointSelection="OnDataPointSelectionHandler"
        Height="@("320px")" >
        <ApexPointSeries 
            TItem="BucketedEntry"
            Items="TimelineViewModel.Timeline.Items"
            XValue="@((BucketedEntry e) => e.BucketStart.ToLocalTime().ToString(TimelineViewModel.XAxisFormat, CultureInfo.InvariantCulture))"
            YValue="@((BucketedEntry e) => e.Count)"
            OrderBy="@(e => e.X)"
            SeriesType="SeriesType.Bar"
            Name="@TimelineViewModel.Timeline.Name"/>
    </ApexChart>
}

@code {
    private ApexChart<BucketedEntry> _chart = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            TimelineViewModel.PropertyChanged += OnTimelineViewModelChanged;
            ThemeViewModel.PropertyChanged += OnThemeChanged;

            // Disable "darken" filter when clicking a bar in the chart
            _chart.Options.Theme = new Theme();
            _chart.Options.States = new States()
            {
                Active = new()
                {
                    AllowMultipleDataPointsSelection = false,
                    Filter = new()
                    {
                        Type = StatesFilterType.none
                    }
                }
            };

            TimelineViewModel.SetChart(_chart);

            await SetupChartTheme();
        }
    }

    private async void OnTimelineViewModelChanged(object? sender, PropertyChangedEventArgs args)
    {
        await InvokeAsync(StateHasChanged);
        await _chart.UpdateSeriesAsync(animate: false);
        await _chart.UpdateOptionsAsync(redrawPaths: false, animate: false, updateSyncedCharts: false);
    }

    private async Task OnDataPointSelectionHandler(SelectedData<BucketedEntry> selectedData)
    {
        TimelineViewModel.XAxisFormat = DashboardViewModel.DecreaseDashboardScope(selectedData.DataPoint);

        await InvokeAsync(StateHasChanged);
        await _chart.UpdateSeriesAsync(animate: false);
        await _chart.UpdateOptionsAsync(redrawPaths: false, animate: false, updateSyncedCharts: false);
    }

    private async void OnThemeChanged(object? sender, PropertyChangedEventArgs args)
    {
        await SetupChartTheme();        
    }

    private async Task SetupChartTheme()
    {
        if (ThemeViewModel.Theme == AppTheme.Dark)
        {
            _chart.Options.Theme.Mode = Mode.Dark;
            _chart.Options.Chart.Background = ThemeViewModel.PaletteDark.Surface.Value;
        }
        else
        {
            _chart.Options.Theme.Mode = Mode.Light;
            _chart.Options.Chart.Background = ThemeViewModel.PaletteLight.Surface.Value;
        }

        await _chart.UpdateOptionsAsync(redrawPaths: false, animate: false, updateSyncedCharts: false);
    }

    public void Dispose()
    {
        TimelineViewModel.PropertyChanged -= OnTimelineViewModelChanged;
        ThemeViewModel.PropertyChanged -= OnThemeChanged;
    }
}
