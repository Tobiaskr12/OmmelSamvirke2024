@using System.ComponentModel
@using ApexCharts
@using Align = MudBlazor.Align;
@using Contracts.SupportModules.Logging.Models
@using Web.Components.Localization
@using Web.Components.Pages.TechnicalData.Localization
@using Web.Components.ViewModels
@using DashboardViewModel = Web.Components.Pages.TechnicalData.DashboardViewModel

@implements IDisposable

@inject DashboardViewModel DashboardViewModel
@inject ThemeViewModel ThemeViewModel

<MudGrid>
    <MudItem xs="12" md="8" lg="9" Class="d-flex">
        <MudPaper Elevation="1" Class="pa-3 d-flex flex-column mud-width-full">
            <MudTable Items="@TraceAnalytics" Dense="true" Hover="true" Bordered="true" Breakpoint="Breakpoint.Sm" RowsPerPage="4" AllowUnsorted="false">
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<TraceAnalysisAggregate, object>(x => x.RequestName)">@TechnicalDataLocalization.Request</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<TraceAnalysisAggregate, object>(x => x.TotalCalls)">@TechnicalDataLocalization.TotalCalls</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<TraceAnalysisAggregate, object>(x => x.MedianExecutionTime)">@TechnicalDataLocalization.ExecutionTimeMedian</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<TraceAnalysisAggregate, object>(x => x.HighestExecutionTime)">@TechnicalDataLocalization.ExecutionTimeMax</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<TraceAnalysisAggregate, object>(x => x.SuccessRate)">@TechnicalDataLocalization.SuccessRate</MudTableSortLabel></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="@TechnicalDataLocalization.Request">@context.RequestName</MudTd>
                    <MudTd DataLabel="@TechnicalDataLocalization.TotalCalls">@context.TotalCalls</MudTd>
                    <MudTd DataLabel="@TechnicalDataLocalization.ExecutionTimeMedian">@context.MedianExecutionTime</MudTd>
                    <MudTd DataLabel="@TechnicalDataLocalization.ExecutionTimeMax">@context.HighestExecutionTime</MudTd>
                    <MudTd DataLabel="@TechnicalDataLocalization.SuccessRate">@context.SuccessRate</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager HideRowsPerPage="true" />
                </PagerContent>
            </MudTable>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" md="4" lg="3">
        <MudPaper Elevation="1" Class="pb-1 d-flex flex-column" Style="max-height: 250px">
            <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4 pt-3">@TechnicalDataLocalization.SuccessRate</MudText>
            <ApexChart @ref="_chart"
                       TItem="ResultRate"
                       Options="@_chartOptions"
                       Height="@("175px")"
                       Title="">
                <ApexPointSeries TItem="ResultRate"
                                 Items="ResultDistribution"
                                 SeriesType="SeriesType.Donut"
                                 XValue="@(e => e.Result)"
                                 YValue="@(e => e.Count)" />
            </ApexChart>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private ApexChart<ResultRate>? _chart;
    private ApexChartOptions<ResultRate> _chartOptions = new ApexChartOptions<ResultRate>
        {
            Colors = ["#008FFB", "#FF4560"],
            Tooltip = new Tooltip
            {
                FillSeriesColor = false
            },
            Legend = new Legend
            {
                Labels = new LegendLabels()
            }
        };

    public List<ResultRate> ResultDistribution { get; set; } = [];
    public class ResultRate
    {
        public required string Result { get; init;  }
        public required int Count { get; init; }
    }

    private List<TraceAnalysisAggregate> TraceAnalytics { get; set; } = [];
    public class TraceAnalysisAggregate
    {
        public required string RequestName { get; init; }
        public required int TotalCalls { get; init; }
        public required long MedianExecutionTime { get; init; }
        public required long HighestExecutionTime { get; init; }
        public required string SuccessRate { get; init; }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await GetData();
        DashboardViewModel.PropertyChanged += OnDashboardViewModelChanged;
        ThemeViewModel.PropertyChanged += OnThemeViewModelChanged;

        await SetChartLegendColorsAccordingToTheme();
    }

    private async void OnDashboardViewModelChanged(object? sender, PropertyChangedEventArgs args)
    {
        await GetData();
        await InvokeAsync(StateHasChanged);
    }

    private async void OnThemeViewModelChanged(object? sender, PropertyChangedEventArgs args)
    {
        await SetChartLegendColorsAccordingToTheme();
    }

    private async Task SetChartLegendColorsAccordingToTheme()
    {
        _chartOptions.Legend.Labels.Colors = ThemeViewModel.Theme == AppTheme.Light 
            ? new ApexCharts.Color("#000000") 
            : new ApexCharts.Color("#FFFFFF");

        if (_chart is null) return;

        await InvokeAsync(StateHasChanged);
        await _chart.UpdateSeriesAsync(animate: false);
        await _chart.UpdateOptionsAsync(redrawPaths: false, animate: false, updateSyncedCharts: false);
    }

    private async Task GetData()
    {
        GetTraceAnalytics();
        await GetSuccessRateDistribution();

        await InvokeAsync(StateHasChanged);
    }

    private void GetTraceAnalytics()
    {
        TraceAnalytics = DashboardViewModel.FilteredTraces
            .GroupBy(x => x.RequestName)
            .Select(x => new TraceAnalysisAggregate
                {
                    RequestName = x.Key,
                    TotalCalls = x.Count(),
                    MedianExecutionTime = GetMedianExecutionTime(x),
                    HighestExecutionTime = x.MaxBy(entry => entry.ExecutionTimeMs)?.ExecutionTimeMs ?? -1,
                    SuccessRate = CalculateSuccessRate(x)
                }).ToList();
    }

    private async Task GetSuccessRateDistribution()
    {
        var results = new List<string>
        {
            ResultToString(true),
            ResultToString(false)
        };

        ResultDistribution = results
            .Select(result => new ResultRate
                {
                    Result = result,
                    Count = DashboardViewModel.FilteredTraces.Count(trace => ResultToString(trace.IsSuccess) == result)
                }).ToList();


        if (_chart is not null)
        {
            await InvokeAsync(StateHasChanged);
            await _chart.UpdateSeriesAsync(animate: false);
            await _chart.UpdateOptionsAsync(redrawPaths: false, animate: false, updateSyncedCharts: false);
        }
    }

    private string ResultToString(bool result)
    {
        switch (result)
        {
            case true:
                return GlobalLocalization.Success;
            case false:
                return GlobalLocalization.Failed;
        }
    }

    private long GetMedianExecutionTime(IGrouping<string, TraceEntry> traces)
    {
        List<TraceEntry> sortedByExecutionTime = traces.OrderBy(x => x.ExecutionTimeMs).ToList();
        return sortedByExecutionTime.ElementAt(sortedByExecutionTime.Count / 2).ExecutionTimeMs;
    }

    private string CalculateSuccessRate(IGrouping<string, TraceEntry> traces)
    {
        int successCount = traces.Count(x => x.IsSuccess);
        if (successCount == 0) return "00.00%";

        double successRate = (double)successCount / traces.Count();
        return $"{(successRate * 100).ToString("0.00").PadLeft(5, '0')}%";
    }

    public void Dispose()
    {
        DashboardViewModel.PropertyChanged -= OnDashboardViewModelChanged;
        ThemeViewModel.PropertyChanged -= OnThemeViewModelChanged;
    }
}
