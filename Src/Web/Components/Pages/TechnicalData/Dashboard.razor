@page "/teknisk-data"
@page "/technical-data"

@using Web.Components.Localization
@using Web.Components.Pages.TechnicalData.Components.Timeline
@using System.ComponentModel
@using Web.Components.Pages.TechnicalData.Components.Logs
@using Web.Components.Pages.TechnicalData.Components.Traces
@using Web.Components.Pages.TechnicalData.Localization

@inject DashboardViewModel DashboardViewModel
@inject TimelineViewModel TimelineViewModel

@implements IDisposable

<PageTitle>@TechnicalDataLocalization.DashboardPageTitle</PageTitle>

<MudBreakpointProvider OnBreakpointChanged="BreakpointChanged" />

<MudPaper Class="pa-4 mx-4 mb-4">
    <div class="d-flex align-center flex-wrap justify-space-between mb-5">
        <MudGrid>
            <MudItem md="8" sm="12" xs="12">
                <div 
                    class="@(_breakpointLessThanSm
                        ? "d-flex flex-row-reverse"
                        : "d-flex justify-content-start")"
                     style="@(_breakpointLessThanSm 
                        ? "gap: 0px; width: calc(100% - 10px); justify-content: flex-end;"
                        : "gap: 20px; width: 100%")">
                    <MudIconButton Icon="@Icons.Material.Filled.ArrowBack"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   Size="Size.Medium"
                                   Style="margin-right: -10px; align-self: center; padding: 8px;"
                                   OnClick="OnUndoButtonClicked"
                                   Disabled="@(DashboardViewModel.CurrentView == DashboardView.MultipleDays)" />

                    <div style="width: 300px">
                        <MudDateRangePicker 
                            @bind-DateRange="@DashboardViewModel.DateRange"
                            DateFormat="dd/MM/yyyy"
                            TitleDateFormat="MMMM"
                            AnchorOrigin="Origin.BottomLeft"
                            Margin="Margin.Dense"
                            Variant="Variant.Outlined"
                            MaxDate="DateTime.Now.Date"
                            MinDate="DateTime.Now.AddDays(-7).Date" />
                    </div>

                    <!-- Shown on larger displays-->
                    <MudToggleGroup 
                        T="DashboardTab"
                        Color="Color.Primary"
                        ValueChanged="value => OnTabsSwitched(value)"
                        SelectionMode="SelectionMode.SingleSelection"
                        Value="DashboardViewModel.CurrentlyActiveTab"
                        Class="d-none d-sm-flex"
                        Style="@(_breakpointLessThanMd
                                ? "align-self: center; margin-left: auto; height: auto; border-radius: 5px"
                                : "align-self: center; height: auto; border-radius: 5px")">
                        <MudToggleItem Value="@DashboardTab.Logs" Text="@TechnicalDataLocalization.Logs" />
                        <MudToggleItem Value="@DashboardTab.Traces" Text="@TechnicalDataLocalization.Traces" />
                    </MudToggleGroup>
                </div>
            </MudItem>
            <MudItem md="4" sm="12" xs="12">
                <div class="d-flex flex-row" style="gap: 10px">
                    <MudTextField @bind-Value="DashboardViewModel.SearchString"
                                    Placeholder="@GlobalLocalization.Search"
                                    Margin="Margin.Dense"
                                    Adornment="Adornment.Start"
                                    AdornmentIcon="@Icons.Material.Filled.Search"
                                    IconSize="Size.Medium"
                                    Variant="Variant.Outlined"
                                    Style="flex: 1"
                                    Class="mt-1" />

                    <!-- Shown on smaller displays-->
                    <MudToggleGroup T="DashboardTab"
                                    Color="Color.Primary"
                                    ValueChanged="value => OnTabsSwitched(value)"
                                    SelectionMode="SelectionMode.SingleSelection"
                                    Class="d-flex d-sm-none"
                                    Style="align-self: center; height: auto; border-radius: 5px">
                        <MudToggleItem Value="@DashboardTab.Logs" Text="@TechnicalDataLocalization.Logs" />
                        <MudToggleItem Value="@DashboardTab.Traces" Text="@TechnicalDataLocalization.Traces" />
                    </MudToggleGroup>
                </div>
            </MudItem>
        </MudGrid>
    </div>

    @if (DashboardViewModel.Logs.Any() || DashboardViewModel.Traces.Any()) {
        <Timeline />
        <MudDivider Class="mb-8" />
    }

    <!-- Logs Section -->
    @if (DashboardViewModel.CurrentlyActiveTab == DashboardTab.Logs)
    {
        <LogsGraphs />
        <MudDivider Class="my-8" />
        <LogsTable />
    }

    <!-- Traces Section -->
    @if (DashboardViewModel.CurrentlyActiveTab == DashboardTab.Traces)
    {
        <TracesGraphs />
        <MudDivider Class="my-8" />
        <TracesTable />
    }
</MudPaper>

@code {
    private void OnTabsSwitched(DashboardTab dashboardTab)
    {
        DashboardViewModel.CurrentlyActiveTab = dashboardTab;
    }

    private bool _breakpointLessThanMd;
    private bool _breakpointLessThanSm;

    private void BreakpointChanged(Breakpoint breakpoint)
    {
        _breakpointLessThanMd = breakpoint < Breakpoint.Md;
        _breakpointLessThanSm = breakpoint < Breakpoint.Sm;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        DashboardViewModel.PropertyChanged += OnDashboardViewModelChanged;

        await FindDataInSelectedRange();
    }

    private async void OnDashboardViewModelChanged(object? sender, PropertyChangedEventArgs args)
    {
        if (args.PropertyName == nameof(DashboardViewModel.DateRange))
        {
            await FindDataInSelectedRange();
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task FindDataInSelectedRange()
    {
        DashboardViewModel.ReloadData(DashboardViewModel.DateRange);

        await InvokeAsync(StateHasChanged);
    }

    private void OnUndoButtonClicked()
    {
        TimelineViewModel.XAxisFormat = DashboardViewModel.IncreaseDashboardScope();
    }

    public void Dispose()
    {
        DashboardViewModel.PropertyChanged -= OnDashboardViewModelChanged;
    }
}
